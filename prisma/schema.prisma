generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(uuid())
  firstName        String
  lastName         String
  email            String            @unique
  password         String
  accountStatus    AccountStatus     @default(PENDING)
  confirmationCode String            @unique @default(uuid())
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  matrices         Matrix[]
  sessions         Session[]
  AttendedSession  AttendedSession[]

  @@map("users")
}

model Matrix {
  id        Int       @id @default(autoincrement())
  name      String
  rows      Int
  columns   Int
  values    Json
  creator   User      @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId String
  sessions  Session[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("matrices")
}

model Session {
  id              Int               @id @default(autoincrement())
  hashId          String            @unique @default(uuid())
  name            String
  matrix          Matrix            @relation(fields: [matrixId], references: [id], onDelete: Cascade)
  matrixId        Int
  owner           User              @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId         String
  votings         Voting[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  AttendedSession AttendedSession[]

  @@map("sessions")
}

model AttendedSession {
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  session       Session @relation(fields: [sessionHashId], references: [hashId], onDelete: Cascade)
  sessionHashId String

  @@unique([userId, sessionHashId])
  @@map("attended_sessions")
}

model Voting {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  active      Boolean
  session     Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("votings")
}

enum AccountStatus {
  PENDING
  ACTIVE
}
